

[
  
  
    
    
  
    
    
      {
        "title": "How to use Jekyll",
        "excerpt": "Start a blog or a static site with Jekyll.\nJekyll is “an open-source simple static site generator”. In other words, Jekyll converts plain text files from a computer into a website or blog.\n",
        "content": "Start a blog or a static site with Jekyll.\nJekyll is “an open-source simple static site generator”. In other words, Jekyll converts plain text files from a computer into a website or blog.\n\nYou’ll find this post in your _posts directory. Go ahead and edit it and re-build the site to see your changes. You can rebuild the site in many different ways, but the most common way is to run bundle exec jekyll serve, which launches a web server and auto-regenerates your site when a file is updated.\n\nTo add new posts, simply add a file in the _posts directory that follows the convention YYYY-MM-DD-name-of-post.ext and includes the necessary front matter. Take a look at the source for this post to get an idea about how it works.\n\nJekyll also offers powerful support for code snippets:\n\ndef print_hi(name)\n  puts \"Hi, #{name}\"\nend\nprint_hi('Tom')\n#=&gt; prints 'Hi, Tom' to STDOUT.\n\nCheck out the Jekyll docs for more info on how to get the most out of Jekyll. File all bugs/feature requests at Jekyll’s GitHub repo. If you have questions, you can ask them on Jekyll Talk.\n\n\n\nUsing Jekyll with Supply theme\nSupply is designed to sell products through Gumroad, but you can use the theme for a regular blog or just pick .\n\nGulp commands with browser reload\nIn addition to regular Jekyll commands, Supply lets you use Gulp to build and preview your site.\n\nIn the terminal, simply run\n\ngulp build\n\n\nto build your site concatenate your css (in asset -&gt; css)\n\nUse\n\ngulp watch\n\n\nThis command builds the site locally on port 3000, with Browsersync so you can quickly revise design changes.\n\nPreview your site with browser reload at: localhost:3000.\n\nUse the address localhost:3001 for additional help like grid preview, css highlight and more during development.\n",
        "url": "/jekyll/tutorial/2020/04/16/how-to-use-jekyll/"
      },
    
      {
        "title": "Theme setup",
        "excerpt": "Getting started with Jekyll + Supply\nSupply is designed to sell products through Gumroad, but you can also use the theme to start a regular Jekyll blog.\n",
        "content": "Getting started with Jekyll + Supply\nSupply is designed to sell products through Gumroad, but you can also use the theme to start a regular Jekyll blog.\n\nSetup\n\n\n  Install Jekyll\n  Add your site and author details in _config.yml.\n  Get a workflow going to see your site’s output with Jekyll locally using Jekyll commands or npm.\n\n\nSupply was built with Jekyll version 4.0.0, and should support newer versions as well.\n\nInstall the dependencies with Bundler:\n\n$ bundle install\n\n\nRun jekyll commands through Bundler to ensure you’re using the right versions:\n\n$ bundle exec jekyll serve\n\n\nConfig\nAdd your custom configuration in the _config file.\n\nNavigation\n\nExposed as a data file to give clients better access\nSet in the Data / Navigation section, look for navigation.yml in  _data.\n\nFooter\nLook for footer.html in _includes to add and change your footer links.\n\nContact Page\nTo add you formcarry endpoint url to _config.yml, you’ll need a fromcarry account, please refer to formcarry documentation\n\nAdd your map coordinates if you want to display a map. Please refer to the jekyll-leaflet plugin and Leaflet documentation for customizing your map(s).\n\nProduct Pages\nIf you have products on Gumroad, you can start right away by adding your product pages. Within the Supply theme you’ll find sample of product page with free products, located in _pages.\n\nDevelop\n\nBuilding front-end assets: styles and scripts\n\nInstall Node module dependencies:\n\nnpm install\n\n\nTachyons\n\nYou can change the site styling using Tachyons, look for the CSS in the sup-theme file, located in the src folder.\n\nTachyons is a CSS toolkit and design system based on using components. Please refer to Tachyons documentation, you can also start with https://github.com/dwyl/learn-tachyons\n\nOnce you are done with your style changes, run:\n\nRun the npm run\nbuild:css\n\n\nThat will process all your CSS files in one readable file located in assets/css/sup-tachyons.css.\n\nto minify your css you can run\n\nnpm run minify-css\n\n\nor\n\nnpm run start\n\n\nto minify and build the site locally.\n\nnpm commands with browser reload\n\nSupply uses a couple of custom Postcss npm scripts. Make sure your dependencies are installed: npm install. Type npm outdated to see if you have outdated versions, then install any outdated dependencies.\n\nOnce that is done, to build your site &amp; concatenate your CSS (in assets -&gt; CSS), simply run:\n\nnpm run start\n\n\nThis command builds the site locally on port 4000, you can quickly revise design changes thanks to livereload.\n\nEditing\n\nPosts\n\n\n  Add, update or remove a post in the Posts collection.\n  Change the defaults when new posts are created in _posts/_defaults.md.\n\n\nCollections\nYou can find products samples in the _products collection folder. By design all the products are on display on the home page.\nYou can manually create pages to sort the template collection by custom variable.\n\nYou can also add Gumroad overlay for products or templates in posts thanks to an include.\n\nWrite something like:\n\n&lt;a href=\"https://gum.co/supply\" class=\"no-underline pv2 grow db\"&gt;&lt;img class=\"w-100\" src=\"/images/screenshot.png\"&gt;&lt;/a&gt;\n{% include gumroad-overlay.html id=\"supply\" %}\n\n\nto get a product display like this:\n\n\n\n\n\n\n     I demand Supply!\n\nDon’t forget to customize your Gumroad button text in your post of product page front matter.\nFor instance, the front matter of this post reads like this:\n\n---\ntitle: Theme setup\nlayout: post\ndescription_markdown: &gt;-\n  Start your site using Jekyll + Gumroad with the Supply theme.\ndate: 2020-04-16 12:48:59 +0100\ncategories: [Jekyll, tutorial]\ntext-button: I demand Supply!\n---\n\n\nYou can of course design your own “buy me” button instead of the Gumroad overlay icon\n",
        "url": "/jekyll/tutorial/2020/04/16/supply-theme-setup/"
      },
    
      {
        "title": "Theme development",
        "excerpt": "Develop\n",
        "content": "Develop\n\nAll the files\n\nsupply % tree\n.\n├── 301.txt\n├── CNAME\n├── CODE_OF_CONDUCT.md\n├── Gemfile\n├── Gemfile.lock\n├── LICENSE\n├── README.md\n├── SECURITY.md\n├── _config.yml\n├── _data\n│   ├── navigation.yml\n│   └── theme.yml\n├── _includes\n│   ├── Gumroad-secured.html\n│   ├── category_tag_list.html\n│   ├── figure\n│   ├── footer.html\n│   ├── formcarry.html\n│   ├── gumroad-embed.html\n│   ├── gumroad-link.html\n│   ├── gumroad-overlay.html\n│   ├── navigation.html\n│   ├── post_pagination.html\n│   ├── product-styles.html\n│   ├── relative-src.html\n│   ├── site-search.html\n│   ├── social-icon.html\n│   └── video.html\n├── _layouts\n│   ├── archive.html\n│   ├── default.html\n│   ├── page.html\n│   ├── post.html\n│   └── product.html\n├── _pages\n│   ├── 404.md\n│   ├── about.md\n│   ├── blog.html\n│   ├── contact-success.html\n│   ├── contact.html\n│   ├── faq.md\n│   ├── free-products.html\n│   ├── privacy.md\n│   └── support.md\n├── _posts\n│   ├── 2020-04-12-how-to-use-jekyll.md\n│   ├── 2020-04-12-supply-theme-setup.md\n│   ├── 2020-04-14-theme-development.md\n│   ├── 2020-04-15-custom-variables.md\n│   ├── 2020-04-16-post-formatting.md\n│   ├── 2020-04-17-code-blocks.md\n│   ├── 2020-04-19-post-updated.md\n│   ├── 2020-04-20-post-video.md\n│   ├── 2020-04-21-built-in-site-search.md\n│   ├── 2020-04-22-add-a-product-page.md\n│   ├── 2020-04-23-gumroad-embed.md\n│   ├── 2020-04-23-gumroad-hyperlink.md\n│   ├── 2020-04-23-gumroad-overlay.md\n│   ├── 2020-04-23-post-with-products.md\n│   └── 2021-08-26-jekyll-SEO.md\n├── _products\n│   ├── Screenplay-template-for-Apple-Pages-Warner-Brothers.md\n│   ├── assignments-tracker.md\n│   ├── free-Japanese-anime-storyboard-template-widescreen-a4-vertical.md\n│   ├── free-anime-storyboard-template-widescreen-a4-vertical.md\n│   ├── soon-temporary-jekyll-site-template.md\n│   └── supply-jekyll-e-commerce-theme.md\n├── android-chrome-192x192.png\n├── android-chrome-512x512.png\n├── apple-touch-icon.png\n├── assets\n│   ├── css\n│   │   ├── sup-tachyons.css\n│   │   └── sup-tachyons.min.css\n│   ├── js\n│   │   ├── fetch.js\n│   │   └── script.min.js\n│   └── search.json\n├── browserconfig.xml\n├── favicon-16x16.png\n├── favicon-32x32.png\n├── favicon.ico\n├── images\n│   ├── image-1200.jpg\n│   ├── image-600.jpg\n│   ├── screenshot.png\n│   └── templates\n│       ├── assignments\n│       │   └── assignments_tracker_spreadsheet.png\n│       ├── free-pdf-storyboards\n│       │   ├── Japanese_Anime_storyboard-template_1.85x1_A4-vertical.png\n│       │   ├── storyboard-anime-template_1.85x1_A4-vertical_photoshop_preview.png\n│       │   └── storyboard-anime-template_1.85x1_A4-vertical_print_preview.png\n│       ├── jekyll\n│       │   ├── Soon_Jekyll-template-sample.png\n│       │   └── Supply-temp.png\n│       └── screenplay\n│           ├── Screenplay_Cole_Haag_template.png\n│           └── Screenplay_Warner_Brothers_template.png\n├── index.html\n├── mstile-144x144.png\n├── mstile-150x150.png\n├── mstile-310x150.png\n├── mstile-310x310.png\n├── mstile-70x70.png\n├── package-lock.json\n├── package.json\n├── postcss.config.js\n├── robots.txt\n├── safari-pinned-tab.svg\n├── site.webmanifest\n├── siteicon.png\n└── src\n    ├── _aspect-ratios.css\n    ├── _background-position.css\n    ├── _background-size.css\n    ├── _border-colors.css\n    ├── _border-radius.css\n    ├── _border-style.css\n    ├── _border-widths.css\n    ├── _borders.css\n    ├── _box-shadow.css\n    ├── _box-sizing.css\n    ├── _clears.css\n    ├── _code.css\n    ├── _colors.css\n    ├── _coordinates.css\n    ├── _debug-children.css\n    ├── _debug-grid.css\n    ├── _debug.css\n    ├── _display.css\n    ├── _flexbox.css\n    ├── _floats.css\n    ├── _font-family.css\n    ├── _font-style.css\n    ├── _font-weight.css\n    ├── _forms.css\n    ├── _heights.css\n    ├── _hovers.css\n    ├── _images.css\n    ├── _letter-spacing.css\n    ├── _line-height.css\n    ├── _links.css\n    ├── _lists.css\n    ├── _max-widths.css\n    ├── _media-queries.css\n    ├── _module-template.css\n    ├── _negative-margins.css\n    ├── _nested.css\n    ├── _normalize.css\n    ├── _opacity.css\n    ├── _outlines.css\n    ├── _overflow.css\n    ├── _position.css\n    ├── _rotations.css\n    ├── _skins-pseudo.css\n    ├── _skins.css\n    ├── _spacing.css\n    ├── _styles.css\n    ├── _tables.css\n    ├── _text-align.css\n    ├── _text-decoration.css\n    ├── _text-transform.css\n    ├── _type-scale.css\n    ├── _typography.css\n    ├── _utilities.css\n    ├── _vertical-align.css\n    ├── _visibility.css\n    ├── _white-space.css\n    ├── _widths.css\n    ├── _word-break.css\n    ├── _z-index.css\n    ├── sup-tachyons.css\n    ├── sup-theme.css\n    └── tachyons.css\n\n\nincludes\n\nLayouts\nThe _layouts folder is where you can change the structure of your pages layout.\n\nCollections\nBy default, products are showcased in _products collection, all or only highlighted templates are show on the home page. You can also add Gumroad overlay for products in posts thanks to an include. You’ll find a few product pages as samples\n\nStyling with Tachyons\nYou can change the site styling using Tachyons, look for the CSS in the sup-theme file, located in the src folder.\n\nTachyons is a CSS toolkit and design system based on using components. Please refer to Tachyons documentation, you can also start with https://github.com/dwyl/learn-tachyons\n\nOnce you are done with your style changes, run:\n\nRun the npm run\nbuild:css\n\n\nThat will process all your CSS files in one readable file located in assets/css/sup-tachyons.css.\n\nto minify your css you can run\n\nnpm run minify-css\n\n\nor\n\nnpm run start\n\n\nto minify and build the site locally.\n\nnpm commands with browser reload\n\nSupply uses a couple of custom Postcss npm scripts. Make sure your dependencies are installed: npm install. Type npm outdated to see if you have outdated versions, then install any outdated dependencies.\n\nOnce that is done, to build your site &amp; concatenate your CSS (in assets -&gt; CSS), simply run:\n\nnpm run start\n\n\nThis command builds the site locally on port 4000, you can quickly revise design changes thanks to livereload.\n\nContribute\nSupply code is freely available and contributions are welcome.\nIf you find a bug or have an idea how to improve this theme, please open a pull request on GitHub.\n\nContribute to Supply Supply repo\n",
        "url": "/jekyll/tutorial/2020/04/16/theme-development/"
      },
    
      {
        "title": "Using custom variables",
        "excerpt": "Jekyll collections front matter type\n",
        "content": "Jekyll collections front matter type\n\nSupply is a Jekyll theme for e-commerce, based on a collection called products.\n\nThis collection has its own custom front matter variable, or type, with different attributes.\n\nThis post is about how you can write your front matter variables on top of the Jekyll defaults, that you can later access in Liquid.\n\nIn our Supply sample case, one variable would be cat, standing for categories, another could be software,  price, etc.\n\nYou can create variables of your own, like for instance apparel if you have T-shirt and hoodies designs,  printsif you are selling prints, and so on.\n\nThis is particularly useful for collections. For example, the front matter for one of our products post could look like this:\n\n---\ntitle: 2 free anime storyboard templates\nlayout: product\nsoftware: PDF\ncat: [anime]\ndescription_markdown: &gt;-\n  Two free PDF Ghibli-style Anime storyboard templates, in Japanese, for 1.85:1 aspect ratio on A4 vertical.\ndate: 2020-01-27 12:09:50 +0100\nlast_modified_at: 2020-02-26 09:24:48 +0100\nid:\nprice: Free\ntext-button: Cool! Give me this template, please!\nimage: /images/templates/free-pdf-storyboards/Japanese_Anime_storyboard-template_1.85x1_A4-vertical.png\n---\n\n\nNow suppose we would like to browse only the Free items from the products collection, Liquid templating language makes this simple to do manually. First, we need to write a page to sort the templates with the Free variable.\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n---\ntitle: Free products\nsubtitle: This is an example page to display product by genre\npermalink: /free-products-samples/\nhero: Free products\nlayout: default\n---\n&lt;div itemscope itemtype=\"http://schema.org/ItemList\" class=\"content\" id=\"products\"&gt;\n\t&lt;section class=\"cf pb5 ph6-ns ph2\"&gt;\n\t\t&lt;div class=\"container flex-wrap flex\"&gt;\n\n    {% assign products = site.products | where_exp: \"product\", \"product.price contains 'Free'\" %}\n    {% for product in products reversed %}\n\n\t\t&lt;div itemprop=\"itemListElement\" itemscope itemtype=\"http://schema.org/Product\" class=\"product-list w-100 w-50-m ph2-m w-third-l ph3\"&gt;\n          &lt;div itemprop=\"image\" class=\"style aspect-ratio aspect-ratio--1x1\" &gt;\n            &lt;a href=\"{{ product.url }}\" style=\"background-image:url({{ product.image }});\"\n            class=\"db bg-center cover aspect-ratio--object\" /&gt;&lt;h4 class=\"f4 helvetica bg-green no-underline white shadow-2 grow pa2 pv3 dib mr3\"&gt;$ {{ product.price }}&lt;/h4&gt;\n            &lt;/a&gt;\n\t\t\t\t\t&lt;/div&gt;\n\t\t\t\t\t\t&lt;article itemprop=\"itemListElement\" itemscope itemtype=\"http://schema.org/Offer\" class=\"product-details dib v-mid lh-copy avenir\"&gt;\n\t\t\t\t\t\t\t&lt;h3&gt;&lt;a class=\"f5 f4-ns mb0 link black-90 link dim avenir\" href=\"{{ product.url }}\"&gt;&lt;span itemprop=\"name\"&gt;{{ product.title }}&lt;/span&gt;&lt;/a&gt;&lt;/h3&gt;\n\t\t\t\t\t\t\t&lt;h4 itemprop=\"itemOffered\"&gt;Software: {{ product.software }}&lt;/h4&gt;\n\t\t\t\t\t\t\t&lt;div itemprop=\"description\" class=\"product-description f6 f5 fw4 mt1 black-60 pb2\"&gt;\n\n\t\t\t\t\t\t\t\t{{ product.description_markdown | truncate: 92 | markdownify }}\n\n\t\t\t\t\t\t\t&lt;/div&gt;\n\t\t\t\t\t\t&lt;/article&gt;\n\t\t\t\t\t&lt;/div&gt;\n\t\t\t\t{% endfor %}\n    &lt;/div&gt;\n    &lt;h4 class=\"f4 helvetica\"&gt;Not what you are looking for?&lt;/h4&gt;\n    {% include site-search.html %}\n  &lt;/div&gt;\n&lt;/section&gt;\n&lt;/div&gt;\n\n\nSee in line 12:\n\n\n{% assign products = site.products | where_exp: \"product\", \"product.price contains 'Free'\" %}\n\n\n\nAnd that’s it, Liquid is pretty straightforward. We can now visit the free products page.\n\nWith Tachyons, it is easy to style your custom pages differently.\n",
        "url": "/jekyll/tutorial/gumroad/2020/04/16/custom-variables/"
      },
    
      {
        "title": "Post formatting",
        "excerpt": "Everything you need to format your posts\n",
        "content": "Everything you need to format your posts\n\nYou’ll find this post in your _posts directory. Go ahead and edit it and re-build the site to see your changes. You can rebuild the site in many different ways, but the most common way is to run jekyll serve, which launches a web server and auto-regenerates your site when a file is updated.\n\nTo add new posts, simply add a file in the _posts directory that follows the convention YYYY-MM-DD-name-of-post.ext and includes the necessary front matter. Take a look at the source for this post to get an idea about how it works.\n\n\n\nHeadings\nHere are paragraph headings:\n\nHeading One\n\nHeading Two\n\nHeading Three\n\nHeading Four\n\nHeading Five\n\nHeading Six\n\n\n\nImages\n\nAdd images to your post using markdown.\n\n![Mountain](/images/image-1200.jpg)\n\n\n\nImage with caption\n\nCentered image with caption\n\n\n\n  \n  \n    \n      Mountain\n\n    \n  \n  \n\n\n\nMountain\n\nImage aligned left\n\n\n\nImage aligned right\n\n\n\nPost width image\n\nFull width image\n\nUsing Markdown:\n\nInput:\n![Mountain](/images/image-1200.jpg)\n{: .full .tc}\n\n\n\nResult:\n\n\n\nMake sure your block inline attribute lists like {: .full .tc} is not on the same line as your image markup to render styling properly\n\nResponsive Videos\n\nYouTube\n\n\n  \n\n\nVimeo\n\n\n  \n\n\nBlockquotes\nSingle line blockquote:\n\n\n  I have no idea\n\n\nMulti line blockquote with a cite reference:\n\n\n  I have no idea, but I do have ideas.\n\n  — Yves Capelle\n\n\n\n\nTables\nTable.\n\n\n  \n    \n      Employee\n      Salary\n       \n    \n  \n  \n    \n      John Joe\n      $1\n      Needs a better salary\n    \n    \n      Jane Doe\n      $10K\n      Blogging intern\n    \n    \n      Joe Bloggs\n      $25k\n      Photographer\n    \n    \n      Jane Bloggs\n      $100k\n      Marketer &amp; Copywriter\n    \n  \n\n\n\n\nTable with a footer.\n\n\n  \n    \n      Header1\n      Header2\n      Header3\n    \n  \n  \n    \n      cell1\n      cell2\n      cell3\n    \n    \n      cell4\n      cell5\n      cell6\n    \n  \n  \n    \n      cell1\n      cell2\n      cell3\n    \n    \n      cell4\n      cell5\n      cell6\n    \n  \n  \n    \n      Footer1\n      Footer2\n      Footer3\n    \n  \n\n\n\n\n\n\nCodeblocks\nMinimal codeblock.\n\ndef print_hi(name)\n  puts \"Hi, #{name}\"\nend\nprint_hi('Tom')\n#=&gt; prints 'Hi, Tom' to STDOUT.\n\n\nCodeblock with line numbers.\n\n1\n2\n3\n4\n5\n6\n7\ndef show\n  @widget = Widget(params[:id])\n  respond_to do |format|\n    format.html # show.html.erb\n    format.json { render json: @widget }\n  end\nend\n\n\nCommand line prompt.\n\n$ gem install jekyll\n\n\nThis is what &lt;html&gt; code looks like in a paragraph of text.\n\n\n\nList Types\nDefinition Lists\n\n\n  Definition\n  An exact statement or description of the nature, scope, or meaning of something: our definition of what constitutes poetry.\n\n\nUnordered Lists (Nested)\n\n\n  List item one\n    \n      List item one\n        \n          List item one\n          List item two\n          List item three\n          List item four\n        \n      \n      List item two\n      List item three\n      List item four\n    \n  \n  List item two\n  List item three\n  List item four\n\n\nOrdered List (Nested)\n\n\n  List item one\n    \n      List item one\n        \n          List item one\n          List item two\n          List item three\n          List item four\n        \n      \n      List item two\n      List item three\n      List item four\n    \n  \n  List item two\n  List item three\n  List item four\n\n\n\n\nButtons\nprimary\nsecondary\nsuccess\nwarning\ndanger\ninfo\nlight\ndark\n\nprimary\nsecondary\nsuccess\nwarning\ndanger\ninfo\nlight\ndark\n\nextra large\nextra large\n\nlarge\nlarge\n\nsmall\nsmall\n\nBlock level button\nBlock level outline button\n\nuppercase\ncapitalised\nLOWERCASE\n\ngrow\nglow\ndim\n\n\n\nAlerts/Notices\n\nBeautiful notices that are designed to grab a visitors attention.\n\nBeautiful notices that are designed to grab a visitors attention.\n\nBeautiful notices that are designed to grab a visitors attention.\n\nBeautiful notices that are designed to grab a visitors attention.\n\nBeautiful notices that are designed to grab a visitors attention.\n\nBeautiful notices that are designed to grab a visitors attention.\n\nBeautiful notices that are designed to grab a visitors attention.\n\nBeautiful notices that are designed to grab a visitors attention.\n\nBeautiful notices that are designed to grab a visitors attention.\n\n\n\nLinks / Anchor Tag\n\nPrimary link - You can set custom primary colors in sup-theme.css.\n\nOpen link in new tab\n\nLink title on hover\n\nDim on hover\n\nLink without underline\n\nUnderline on hover\n\nblue link\nblack link\ngreen link\ngray link\nyellow link\ngold link\norange\nlight-purple link\npink/ hover light pink\ndark-pink/ hover hot pink\nred link/ hover dark red\n\n\n\nHTML Tags\n\nAddress Tag\n\n\n  1 Infinite Loop Cupertino, CA 95014 United States\n\n\nAbbreviation Tag\n\nThe abbreviation CSS stands for “Cascading Style Sheets”.\n\nCite Tag\n\n“Code is poetry.” —Automattic\n\nStrike Tag\n\nThis tag will let you strikeout text.\n\nEmphasize Tag\nThe emphasize tag should italicize text.\n\nInsert Tag\nThis tag should denote updated text inserted in a blog post.\n\nKeyboard Tag\nThis scarcely known keyboard tag emulates represents user input and produces an inline element displayed in the browser’s default monospace font.\n\nFootnotes\nI get 10 times more traffic from [Google] 1 than from\n[Yahoo] 2 or [MSN] 3.\n\nStrong Tag\nThis tag makes bold text, try not to overuse it tho.\n\nSubscript Tag\nC6H12O6\n\nSuperscript Tag\nE = mc2\n\nVariable Tag\nThe variable tag allows you to denote variables.\n\nHorizontal Rules\n\n\n\nMark Tag\nThe mark tag allows you to highlight parts of your text.\n\nCheck out the Jekyll docs for more info on how to get the most out of Jekyll. File all bugs/feature requests at Jekyll’s GitHub repo. If you have questions, you can ask them on Jekyll Talk.\n\n\n  \n    \n      http://google.com/        “Google” &#8617;\n    \n    \n      http://search.yahoo.com/  “Yahoo Search” &#8617;\n    \n    \n      http://search.msn.com/    “MSN Search” &#8617;\n    \n  \n\n",
        "url": "/jekyll/tutorial/2020/04/16/post-formatting/"
      },
    
      {
        "title": "This is an updated post",
        "excerpt": "This is a recently updated blog post example. Add last_modified_at: YYYY-MM-DD in any posts YAML front-matter. Your sitemap will be automatically updated.\n",
        "content": "This is a recently updated blog post example. Add last_modified_at: YYYY-MM-DD in any posts YAML front-matter. Your sitemap will be automatically updated.\n",
        "url": "/jekyll/tutorial/2020/04/16/post-updated/"
      },
    
      {
        "title": "Post with code blocks",
        "excerpt": "This is how to add codeblocks to your posts\n",
        "content": "This is how to add codeblocks to your posts\n\nCodeblocks\n\nInput:\n\n``` ruby\ndef show\n  @widget = Widget(params[:id])\n  respond_to do |format|\n    format.html # show.html.erb\n    format.json { render json: @widget }\n  end\nend\n```\n\nOutput:\n\ndef show\n  @widget = Widget(params[:id])\n  respond_to do |format|\n    format.html # show.html.erb\n    format.json { render json: @widget }\n  end\nend\n\n\nCodeblocks with line numbers\n\nInput:\n\n``` text\n\n&lt;figure class=\"highlight\"&gt;&lt;pre&gt;&lt;code class=\"language-ruby\" data-lang=\"ruby\"&gt;&lt;table class=\"rouge-table\"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=\"gutter gl\"&gt;&lt;pre class=\"lineno\"&gt;1\n2\n3\n4\n5\n6\n&lt;/pre&gt;&lt;/td&gt;&lt;td class=\"code\"&gt;&lt;pre&gt;&lt;span class=\"k\"&gt;def&lt;/span&gt; &lt;span class=\"nf\"&gt;show&lt;/span&gt;\n  &lt;span class=\"vi\"&gt;@widget&lt;/span&gt; &lt;span class=\"o\"&gt;=&lt;/span&gt; &lt;span class=\"no\"&gt;Widget&lt;/span&gt;&lt;span class=\"p\"&gt;(&lt;/span&gt;&lt;span class=\"n\"&gt;params&lt;/span&gt;&lt;span class=\"p\"&gt;[&lt;/span&gt;&lt;span class=\"ss\"&gt;:id&lt;/span&gt;&lt;span class=\"p\"&gt;])&lt;/span&gt;\n  &lt;span class=\"n\"&gt;respond_to&lt;/span&gt; &lt;span class=\"k\"&gt;do&lt;/span&gt; &lt;span class=\"o\"&gt;|&lt;/span&gt;&lt;span class=\"nb\"&gt;format&lt;/span&gt;&lt;span class=\"o\"&gt;|&lt;/span&gt;\n    &lt;span class=\"nb\"&gt;format&lt;/span&gt;&lt;span class=\"p\"&gt;.&lt;/span&gt;&lt;span class=\"nf\"&gt;html&lt;/span&gt; &lt;span class=\"c1\"&gt;# show.html.erb&lt;/span&gt;\n    &lt;span class=\"nb\"&gt;format&lt;/span&gt;&lt;span class=\"p\"&gt;.&lt;/span&gt;&lt;span class=\"nf\"&gt;json&lt;/span&gt; &lt;span class=\"p\"&gt;{&lt;/span&gt; &lt;span class=\"n\"&gt;render&lt;/span&gt; &lt;span class=\"ss\"&gt;json: &lt;/span&gt;&lt;span class=\"vi\"&gt;@widget&lt;/span&gt; &lt;span class=\"p\"&gt;}&lt;/span&gt;\n  &lt;span class=\"k\"&gt;end&lt;/span&gt;\n&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;\n\n```\n\nOutput:\n\n1\n2\n3\n4\n5\n6\n7\ndef show\n  @widget = Widget(params[:id])\n  respond_to do |format|\n    format.html # show.html.erb\n    format.json { render json: @widget }\n  end\nend\n\n\nCommand line prompt\n\nInput:\n\n```text\n$ gem install jekyll\n\n\nOutput:\n\n```shell\n$ gem install jekyll\n\n\nCode in a paragraph\n\nInput:\n\nThis is what `&lt;html&gt;` code looks like in a paragraph of text.\n\n\nOutput:\n\nThis is what &lt;html&gt; code looks like in a paragraph of text.\n",
        "url": "/jekyll/tutorial/2020/04/17/code-blocks/"
      },
    
      {
        "title": "Post with responsive videos",
        "excerpt": "Here are two examples of how to add responsive video to a post or page.\n",
        "content": "Here are two examples of how to add responsive video to a post or page.\n\nYouTube\n\n\n  \n\n\nAdd a responsive Youtube video by using the video include.\n\nInput:\n{% include video.html src=\"https://www.youtube-nocookie.com/embed/RjggipNdmXw\" %}\n\n\nOutput:\n\n&lt;div class=\"aspect-ratio aspect-ratio--16x9 w-100 mb4\"&gt;\n  &lt;iframe class=\"aspect-ratio--object\" src=\"https://www.youtube-nocookie.com/embed/RjggipNdmXw\" frameborder=\"0\" allowfullscreen&gt;&lt;/iframe&gt;\n&lt;/div&gt;\n\n\nVimeo\n\n\n  \n\n\nAdd a responsive Vimeo video by using the video include.\n\nInput:\n\n{% include video src=\"https://player.vimeo.com/video/198045963\" %}\n\n\nOutput:\n\n&lt;div class=\"aspect-ratio aspect-ratio--16x9 w-100 mb4\"&gt;\n  &lt;iframe class=\"aspect-ratio--object\" src=\"https://player.vimeo.com/video/198045963\" frameborder=\"0\" allowfullscreen&gt;&lt;/iframe&gt;\n&lt;/div&gt;\n\n",
        "url": "/jekyll/tutorial/2020/04/20/post-video/"
      },
    
      {
        "title": "Site Search",
        "excerpt": "Built-in site search functionality\n",
        "content": "Built-in site search functionality\n\nThe Supply theme has search baked in to prompt the pages relevant to any given inquiry. To display a search box on a post or a page, you need to add one line of code. This snippet\n\n{% include site-search.html %}\n\n\nWill output the following:\n\n\n  \n    Search:\n    \n\n    \n      \n  \n\n\n\n\n\n\n\nPlease enable JavaScript to use the search form.\n\n",
        "url": "/jekyll/tutorial/search/2020/04/21/built-in-site-search/"
      },
    
      {
        "title": "How to add a product page",
        "excerpt": "Jekyll collections front matter type\nTo add a new product page, simply add a file in the _products directory and include the necessary front matter.\n",
        "content": "Jekyll collections front matter type\nTo add a new product page, simply add a file in the _products directory and include the necessary front matter.\n\nTake a look at the product pages samples source to get an idea about how it works, you can these in the _products collection folder. By design, all the products are on display on the home page, in Supply, that is ìndex.html.\n\nYou can manually create pages to sort your product collection by custom variable.\n\nYou can also add Gumroad overlay for products in posts thanks to an include.\n\nWrite something like:\n\n&lt;a href=\"https://gum.co/supply\" class=\"no-underline pv2 grow db\"&gt;&lt;img class=\"w-100\" src=\"/images/screenshot.png\"&gt;&lt;/a&gt;\n{% include gumroad-overlay.html id=\"supply\" %}\n\n\nSince Jekyll 4.0, the link tag now comes with the relative_url filter incorporated into it. You should no longer prepend site.baseurl to link foo.md For further details: https://github.com/jekyll/jekyll/pull/6727\n\nto get a product display like this:\n\n\n\n\n\n\n     \n\nDon’t forget to customize your Gumroad button text in your post of product page front matter.\nFor instance, the front matter of this post reads like this:\n\n---\ntitle: Theme setup\nlayout: post\ndescription_markdown: &gt;-\n  Start your site using Jekyll + Gumroad with the Supply theme.\ndate: 2020-04-16 12:48:59 +0100\ncategories: [Jekyll, tutorial]\ntext-button: I demand Supply!\n---\n\n\nYou can of course design your own “buy me” button instead of the Gumroad overlay icon\n",
        "url": "/jekyll/tutorial/gumroad/2020/04/22/add-a-product-page/"
      },
    
      {
        "title": "Gumroad Embed",
        "excerpt": "You’ll find Gumroad integration snippets in _includes.\nThere are two ways to post a Gumroad product on your site: embed or overlay.\nIn this post, we will look at how to use the embed method.\n",
        "content": "You’ll find Gumroad integration snippets in _includes.\nThere are two ways to post a Gumroad product on your site: embed or overlay.\nIn this post, we will look at how to use the embed method.\n\nGumroad embed\nYou can easily embed a product from Gumroad within your site or page.\n\nSuppose we have a Gumroad product: https://gum.co/supply\n\nTo embed this product, we need to add a short include with the product id to our page or post.\nIn this example, the ID is supply, so we add this include with that:\n\n{% include gumroad-embed.html id=\"supply\" %}\n\n\n{% include gumroad-embed.html id=\"supply\" %}\n\n\nThat will output the product directly on your page:\n\n\n  Loading...\n\n\n\n\n\n  If you have an SSL Certificate set up, the buying process is completely inline. If your site is not secured with HTTPS, you can redirect customers to the payment form in a new, secured tab.\n—GUMROAD Documentation\n\n\nRelated files:\n\ngumroad-embed.html in _includes\n",
        "url": "/jekyll/tutorial/gumroad/2020/04/23/gumroad-embed/"
      },
    
      {
        "title": "Gumroad hyperlink",
        "excerpt": "Sometimes all you want is a simple hyperlink to your product on Gumroad.\n\n\n\n\n",
        "content": "Sometimes all you want is a simple hyperlink to your product on Gumroad.\n\n\n\n\nTo do this, first, write your hyperlink in Markdown, as you’d normally do.\n\nIn this example, we write\n\n[simple hyperlink](https://gum.co/soon-jekyll)\n\n\nthen add this include\n\n{% include gumroad-link.html id=\"soon-jekyll\" %}\n\n\nAnd the result is a simple hyperlink with a Gumroad overlay.\n(click on the link to check the product overlay)\n\nRelated file:\n\ngumroad-link.html in _includes\n",
        "url": "/jekyll/tutorial/gumroad/2020/04/23/gumroad-hyperlink/"
      },
    
      {
        "title": "Gumroad Overlay",
        "excerpt": "Gumroad Overlay is a nice function that lets users on desktop computers buy products from you without ever having to leave your website.\n",
        "content": "Gumroad Overlay is a nice function that lets users on desktop computers buy products from you without ever having to leave your website.\n\nYou can read more about Gumroad Overlay here.\n\nHow to use Gumroad Overlay with Supply\nYou’ll find Gumroad integration snippets in _includes.\nThere are two ways to post a Gumroad product on your site: embed or overlay.\nIn this post, we will look at how to use the overlay method.\n\nTo create a buy button that with an overly to your product published on Gumroad, all you need is its ID.\n\n{% include gumroad-overlay.html id=\"soon-jekyll\" %}\n\nwill output a Gumroad button:\n\n\n\n\n     I want this theme!\n\nPlease note that you should customize the button text in your post or page front matter.\n\nIf you click on this button, you’ll get an overlay of the product page on your post page.\n\nNow, it would be a lot nicer if we had an actual product image linking to Gumroad overlay, right?\nFor this, we simply need to add a link to an image of the product.\nFor example, let’s start this Gumroad link: https://gum.co/soon-jekyll\nLet’s add a product image in the images folder of our site, then we can write this above our button include liquid snippet:\n\n&lt;a href=\"https://gum.co/soon-jekyll\" class=\"no-underline pv2 grow db\"&gt;&lt;img class=\"w-100\" src=\"/images/templates/jekyll/Soon_Jekyll-template-sample.png\"&gt;&lt;/a&gt;\n\n{% include gumroad-overlay.html id=\"soon-jekyll\" %}\n\n\nNote that you can add class to style your html and image.\n\nIt now looks much better:\n\n\n\n\n\n\n     I want this theme!\n\nClicking on this image will prompt the Gumroad overlay on your page.\n\nThe overlay method lets users buy securely from Gumroad without leaving your site!\n\nLast, here is how you can make your custom buttons with Overlay.\n\nRelated files:\n\ngumroad-overlay.html in _includes\n\nYou can also include your product Gumroad ID in your post or page front-matter.\n",
        "url": "/jekyll/tutorial/gumroad/2020/04/23/gumroad-overlay/"
      },
    
      {
        "title": "Post With Products",
        "excerpt": "How to add product(s) to a post\nOn top of your product collection, you can, of course, add a product in a regular post, using the hyperlink, embed, or the overlay methods.\n",
        "content": "How to add product(s) to a post\nOn top of your product collection, you can, of course, add a product in a regular post, using the hyperlink, embed, or the overlay methods.\n\nHyperlink method\nThere is an easy way to add a product overlay with a simple link, like this: Soon is a coming soon page template for Jekyll.\n\n\n\n\n\n(click on the link to check the product overlay)\n\nIn the hyperlink example above, we have:\n\n[simple hyperlink](https://gum.co/soon-jekyll)\n\n\nto which we add this include:\n\n{% include gumroad-link.html id=\"soon-jekyll\" %}\n\n\nGumroad embed\nYou can easily embed a product from Gumroad within your site or page.\n\nSuppose we have a Gumroad product: Supply, an e-commerce template for Jekyll + Gumroad, designed with Tachyons CSS by alternatyves.\n\nTo embed this product, we need to add a short include with the product id to our page or post.\nIn this example, the ID is supply, so we add this include with that:\n\n{% include gumroad-embed.html id=\"supply\" %}\n\n\n{% include gumroad-embed.html id=\"supply\" %}\n\n\nThat will output the product directly on your page:\n\n\n  Loading...\n\n\n\n\nGumroad Overlay\nHere is how to add a Gumroad overlay to an image on your site:\n&lt;a href=\"https://gum.co/supply\" class=\"no-underline pv2 grow db\"&gt;&lt;img class=\"w-100\" src=\"{{site.baseurl}}/images/screenshot.png\"&gt;&lt;/a&gt;\n\n{% include gumroad-overlay.html id=\"supply\" %}\n\n\nThat will output\n\n\n\n\n\n\n     I want to use this theme!\n\nClicking on this image will prompt the Gumroad overlay on your page.\n\nThe overlay method lets users buy securely from Gumroad without leaving your site!\n",
        "url": "/jekyll/tutorial/gumroad/2020/04/23/post-with-products/"
      },
    
      {
        "title": "Jekyll Seo",
        "excerpt": "SEO\nSupply comes with the Jekyll SEO Tag plugin installed.\n",
        "content": "SEO\nSupply comes with the Jekyll SEO Tag plugin installed.\n\nHow it works\nJekyll SEO Tag adds metadata tags for search engines and social networks to better index and display your site’s content.\n\nUninstall Jekyll SEO Tag\nThere are other ways to implement search engine optimisation with Jekyll, or you may not need this.\n\nIn case you would like to uninstall the plugin, here is how to do it:\n\nRemove this line in your Gemfile: gem 'jekyll-seo-tag'.\n\nIn your default.html file in _layouts, remove line 20.\n\nIn your site’s _config.yml, remove\n\nplugins:\n- jekyll-seo-tag\n\n",
        "url": "/jekyll/tutorial/2021/08/26/jekyll-SEO/"
      },
    
  
    
    
  
  
  
  {
    "title": "Home",
    "excerpt": "\n",
    "content": "\n  supplydata\n  \n    \n  \n\n",
    "url": "/"
  },
  
  {
    "title": "front matter",
    "excerpt": "\n",
    "content": "\n",
    "url": "/tag/front-matter/"
  },
  
  {
    "title": "variable",
    "excerpt": "\n",
    "content": "\n",
    "url": "/tag/variable/"
  },
  
  {
    "title": "customization",
    "excerpt": "\n",
    "content": "\n",
    "url": "/tag/customization/"
  },
  
  {
    "title": "updated",
    "excerpt": "\n",
    "content": "\n",
    "url": "/tag/updated/"
  },
  
  {
    "title": "codeblocks",
    "excerpt": "\n",
    "content": "\n",
    "url": "/tag/codeblocks/"
  },
  
  {
    "title": "linenos",
    "excerpt": "\n",
    "content": "\n",
    "url": "/tag/linenos/"
  },
  
  {
    "title": "syntax highlighting",
    "excerpt": "\n",
    "content": "\n",
    "url": "/tag/syntax-highlighting/"
  },
  
  {
    "title": "video",
    "excerpt": "\n",
    "content": "\n",
    "url": "/tag/video/"
  },
  
  {
    "title": "product",
    "excerpt": "\n",
    "content": "\n",
    "url": "/tag/product/"
  },
  
  {
    "title": "page",
    "excerpt": "\n",
    "content": "\n",
    "url": "/tag/page/"
  },
  
  {
    "title": "embed",
    "excerpt": "\n",
    "content": "\n",
    "url": "/tag/embed/"
  },
  
  {
    "title": "hyperlink",
    "excerpt": "\n",
    "content": "\n",
    "url": "/tag/hyperlink/"
  },
  
  {
    "title": "overlay",
    "excerpt": "\n",
    "content": "\n",
    "url": "/tag/overlay/"
  },
  
  {
    "title": "SEO",
    "excerpt": "\n",
    "content": "\n",
    "url": "/tag/seo/"
  },
  
  {
    "title": "Jekyll",
    "excerpt": "\n",
    "content": "\n",
    "url": "/category/jekyll/"
  },
  
  {
    "title": "tutorial",
    "excerpt": "\n",
    "content": "\n",
    "url": "/category/tutorial/"
  },
  
  {
    "title": "Gumroad",
    "excerpt": "\n",
    "content": "\n",
    "url": "/category/gumroad/"
  },
  
  {
    "title": "search",
    "excerpt": "\n",
    "content": "\n",
    "url": "/category/search/"
  }
  
]

